import os

#workflow for input file - POGENOM - step filter

#-----DATA ---names-----------------------------------------------------------
configfile: "./config_files/Input_POGENOM_config.json"
workdir: config["workdir"]
mapqual = config["mapqual"]
thrs = config["threads"]
reads_ext = config["reads_ext"]
mags_ext = config["genomes_ext"]
MAGs_dir = os.path.join(config["workdir"], "RAW_DATA", "Genomes", config["dataset"])
O_READS_dir = os.path.join(config["workdir"], "RAW_DATA", "Reads", config["dataset"])
fraction = config["fraction"]
dataset=config["dataset"]
min_coverage = config["min_coverage"]
bq = config["min_bsq_for_cov_median_calculation"]

params_dir = "_".join(["params","cov", str(min_coverage), "mpq", str(mapqual), "bq", str(bq), "fr", str(fraction)])
mpileup_dir = "_".join(["params","mpq", str(mapqual), "bq", str(bq), "fr", str(fraction)])

#--------------Checking samtools view key parameters after reads mapping ------
if config["samtools_view_alignment_extra_filters"] == "" :
      sam_view_params = "-Sbh"
else:
      sam_view_params = "-Sbh "+config["samtools_view_alignment_extra_filters"]
#------------------------------------------------------------------

prefix_MAGs = [ m.split(mags_ext)[0] for m in os.listdir(MAGs_dir) if m.endswith(mags_ext)]
reads_suffix= config["rev_index"]+reads_ext
samples = [ r.split(reads_suffix)[0] for r in os.listdir(O_READS_dir) if r.endswith(reads_suffix)]


#------------------
rule all:
  input: expand("PREFILT/{dataset}/03_MPILEUP/params_mpq_{mapqual}_bq_{bq}_fr_{fr}/{prefix_mag}/{sample}_in_{prefix_mag}_mpileup", dataset = dataset, prefix_mag = prefix_MAGs, mapqual = mapqual, sample = samples, bq = bq,  fr = fraction),
         expand("PREFILT/{dataset}/02_MAPPING/params_mpq_{mapqual}_fr_{fr}/{prefix_mag}/{sample}_{prefix_mag}_sorted_position.bam.bai", dataset = dataset, prefix_mag = prefix_MAGs, mapqual = mapqual, sample = samples, fr = fraction),
         expand("PREFILT/{dataset}/params_cov_{mincov}_mpq_{mapqual}_bq_{bq}_fr_{fr}/Estimated_median_cov_per_sample.tsv", dataset = dataset, fr = fraction, mapqual = mapqual, bq = bq, mincov = min_coverage),
         expand("PREFILT/{dataset}/params_cov_{mincov}_mpq_{mapqual}_bq_{bq}_fr_{fr}/Selected_samples_Genomes.txt", dataset = dataset, fr = fraction, mapqual = mapqual, bq = bq, mincov = min_coverage)

if config["mapper"] == "bwa" :
  rule indexingA:
      input: expand("RAW_DATA/Genomes/{dataset}/{prefix_mag}{mags_ext}", dataset = dataset, prefix_mag = prefix_MAGs, mags_ext = mags_ext)
      output: expand("01_INDEXING/{{dataset}}/{{prefix_mag}}/{{prefix_mag}}.{suffix}", dataset = dataset, suffix = ["0123","ann","pac","amb","bwt.2bit.64"], prefix_mag = prefix_MAGs)
      params: ref = "01_INDEXING/{dataset}/{prefix_mag}/{prefix_mag}",
              input = "RAW_DATA/Genomes/{dataset}/{prefix_mag}"+config["genomes_ext"]
      threads: 1
      conda: "BWA_env.yaml"
      message: "indexing {params.input} sequence"
      shell: "bwa-mem2 index -p {params.ref} {params.input} 2>/dev/null"

  rule mappingA:
    input: expand("01_INDEXING/{{dataset}}/{{prefix_mag}}/{{prefix_mag}}.{suffix}", dataset = dataset, suffix = ["0123","ann","pac","amb","bwt.2bit.64"], prefix_mag = prefix_MAGs),
           fwd = expand("{tmpdir}/Reads/fraction_{fraction}/{sample}{fwdi}{reads_ext}", tmpdir = config["temp_sub_Reads_dir"], fraction=fraction, sample = samples, reads_ext = reads_ext, fwdi = config["fwd_index"]),
           rev = expand("{tmpdir}/Reads/fraction_{fraction}/{sample}{revi}{reads_ext}", tmpdir = config["temp_sub_Reads_dir"], fraction=fraction, sample = samples, reads_ext = reads_ext, revi = config["rev_index"])
    output: expand("PREFILT/{{dataset}}/02_MAPPING/params_mpq_{{mapqual}}_fr_{{fr}}/{{prefix_mag}}/{{sample}}_{{prefix_mag}}_sorted_position.bam", dataset = dataset, prefix_mag = prefix_MAGs, mapqual = mapqual, sample = samples, fr = fraction)
    params: index = "01_INDEXING/{dataset}/{prefix_mag}/{prefix_mag}",
            mapqual = mapqual,
            groupfwd2 = config["temp_sub_Reads_dir"]+"/Reads/fraction_"+config["fraction"]+"/{sample}"+config["fwd_index"]+config["reads_ext"],
            grouprev2 = config["temp_sub_Reads_dir"]+"/Reads/fraction_"+config["fraction"]+"/{sample}"+config["rev_index"]+config["reads_ext"],
            view = sam_view_params,
            msam=config["coverm_filter_params"],
            pr=config["bwame2_params"],
            out1="PREFILT/{dataset}/02_MAPPING/params_mpq_{mapqual}_fr_{fr}/{prefix_mag}/{sample}_{prefix_mag}_unfiltred.bam",
            out="PREFILT/{dataset}/02_MAPPING/params_mpq_{mapqual}_fr_{fr}/{prefix_mag}/{sample}_{prefix_mag}_filtred_unsorted_position.bam"
    log: expand("PREFILT/{{dataset}}/02_MAPPING/params_mpq_{{mapqual}}_fr_{{fr}}/log_bwa/{{prefix_mag}}/{{sample}}_{{prefix_mag}}.log", dataset = dataset, prefix_mag = prefix_MAGs, mapqual = mapqual, sample = samples, fr = fraction)
    threads: thrs
    conda: "BWA_env.yaml"
    message: "mapping reads to {params.index} \nfwd: {params.groupfwd2}\nrev: {params.grouprev2}\n mapping quality > {params.mapqual} \n and sorting mapping reads by position"
    shell: """
            bwa-mem2 mem {params.pr} -t {threads} {params.index} {params.groupfwd2} {params.grouprev2} 2> {log} | samtools view {params.view} -q {params.mapqual} --threads {threads} > {params.out1}
            coverm filter -b {params.out1} -o {params.out} {params.msam} --threads {threads}
            samtools sort -o {output} --threads {threads} {params.out}
            rm {params.out} {params.out1}
           """

if config["mapper"] == "bowtie2" :
  rule indexing:
      input: expand("RAW_DATA/Genomes/{dataset}/{prefix_mag}{mags_ext}", dataset = dataset, prefix_mag = prefix_MAGs, mags_ext = mags_ext)
      output: expand("01_INDEXING/{{dataset}}/{{prefix_mag}}/{{prefix_mag}}.{suffix1}.bt2", dataset = dataset, suffix1 = range(1,5), prefix_mag = prefix_MAGs),
              expand("01_INDEXING/{{dataset}}/{{prefix_mag}}/{{prefix_mag}}.rev.{suffix}.bt2", dataset = dataset, suffix = range(1,3), prefix_mag = prefix_MAGs)
      params: ref = "01_INDEXING/{dataset}/{prefix_mag}/{prefix_mag}",
              input = "RAW_DATA/Genomes/{dataset}/{prefix_mag}"+config["genomes_ext"]
      threads: thrs
      conda: "BT2_env.yaml"
      message: "indexing {params.input} sequence"
      shell: "bowtie2-build {params.input} {params.ref} --threads {threads} -f -q"

  rule mapping:
      input: expand("01_INDEXING/{dataset}/{prefix_mag}/{prefix_mag}.{suffix1}.bt2", dataset = dataset, suffix1 = range(1,5), prefix_mag = prefix_MAGs),
             expand("01_INDEXING/{dataset}/{prefix_mag}/{prefix_mag}.rev.{suffix}.bt2", dataset = dataset, suffix = range(1,3), prefix_mag = prefix_MAGs),
             fwd = expand("{tmpdir}/Reads/fraction_{fraction}/{sample}{fwdi}{reads_ext}", tmpdir = config["temp_sub_Reads_dir"], fraction=fraction, sample = samples, reads_ext = reads_ext, fwdi = config["fwd_index"]),
             rev = expand("{tmpdir}/Reads/fraction_{fraction}/{sample}{revi}{reads_ext}", tmpdir = config["temp_sub_Reads_dir"], fraction=fraction, sample = samples, reads_ext = reads_ext, revi = config["rev_index"])
      output: expand("PREFILT/{{dataset}}/02_MAPPING/params_mpq_{{mapqual}}_fr_{{fr}}/{{prefix_mag}}/{{sample}}_{{prefix_mag}}_sorted_position.bam", dataset = dataset, prefix_mag = prefix_MAGs, mapqual = mapqual, sample = samples, fr = fraction)
      params: index = "01_INDEXING/{dataset}/{prefix_mag}/{prefix_mag}",
              mapqual = mapqual,
              bowtie2 = config["bowtie2_params"],
              groupfwd2 = config["temp_sub_Reads_dir"]+"/Reads/fraction_"+config["fraction"]+"/{sample}"+config["fwd_index"]+config["reads_ext"],
              grouprev2 = config["temp_sub_Reads_dir"]+"/Reads/fraction_"+config["fraction"]+"/{sample}"+config["rev_index"]+config["reads_ext"],
              msam=config["coverm_filter_params"],
              out1="PREFILT/{dataset}/02_MAPPING/params_mpq_{mapqual}_fr_{fr}/{prefix_mag}/{sample}_{prefix_mag}_unfiltred.bam",
              out="PREFILT/{dataset}/02_MAPPING/params_mpq_{mapqual}_fr_{fr}/{prefix_mag}/{sample}_{prefix_mag}_filtred_unsorted_position.bam",
              view = sam_view_params,
              coverm = config["coverm"]
      log: expand("PREFILT/{{dataset}}/02_MAPPING/params_mpq_{{mapqual}}_fr_{{fr}}/log_bowtie2/{{prefix_mag}}/{{sample}}_{{prefix_mag}}.log", dataset = dataset, prefix_mag = prefix_MAGs, mapqual = mapqual, sample = samples, fr = fraction)
      threads: thrs
      conda: "BT2_env.yaml"
      message: "mapping reads to {params.index} \nfwd: {params.groupfwd2}\nrev: {params.grouprev2}\n mapping quality > {params.mapqual} \n and sorting mapping reads by position"
      shell: """
                bowtie2 {params.bowtie2} -p {threads} -x {params.index} -1 {params.groupfwd2} -2 {params.grouprev2} 2> {log} | samtools view {params.view} -q {params.mapqual} --threads {threads} > {params.out1}
                if [ {params.coverm} == TRUE ]; then
                  coverm filter -b {params.out1} -o {params.out} --threads {threads} {params.msam}
                  samtools sort -o {output} --threads {threads} {params.out}; rm {params.out} {params.out1}
                else
                  samtools sort -o {output} --threads {threads} {params.out1}; rm {params.out1}
                fi
             """

rule indexing_reads_mapping:
  input: expand("PREFILT/{dataset}/02_MAPPING/params_mpq_{mapqual}_fr_{fr}/{prefix_mag}/{sample}_{prefix_mag}_sorted_position.bam", dataset = dataset, prefix_mag = prefix_MAGs, mapqual = mapqual, sample = samples, fr = fraction)
  output: expand("PREFILT/{{dataset}}/02_MAPPING/params_mpq_{{mapqual}}_fr_{{fr}}/{{prefix_mag}}/{{sample}}_{{prefix_mag}}_sorted_position.bam.bai", dataset = dataset, prefix_mag = prefix_MAGs, mapqual = mapqual, sample = samples, fr = fraction)
  params: input="PREFILT/{dataset}/02_MAPPING/params_mpq_{mapqual}_fr_{fr}/{prefix_mag}/{sample}_{prefix_mag}_sorted_position.bam"
  threads: config["threads"]
  message: "indexing sorted reads mapping from {params.input}"
  shell: "samtools index {params.input}"

rule mpileup_and_coverage:
  input: expand("PREFILT/{dataset}/02_MAPPING/params_mpq_{mapqual}_fr_{fr}/{prefix_mag}/{sample}_{prefix_mag}_sorted_position.bam", dataset = dataset, prefix_mag = prefix_MAGs, mapqual = mapqual, sample = samples, fr = fraction)
  output: expand("PREFILT/{{dataset}}/03_MPILEUP/params_mpq_{{mapqual}}_bq_{{bq}}_fr_{{fr}}/{{prefix_mag}}/{{sample}}_in_{{prefix_mag}}_mpileup", dataset = dataset, prefix_mag = prefix_MAGs, mapqual = mapqual, sample = samples, bq = bq, fr = fraction)
  params: input="PREFILT/{dataset}/02_MAPPING/params_mpq_{mapqual}_fr_{fr}/{prefix_mag}/{sample}_{prefix_mag}_sorted_position.bam",
          out="PREFILT/{dataset}/03_MPILEUP/params_mpq_{mapqual}_bq_{bq}_fr_{fr}/{prefix_mag}/{sample}_in_{prefix_mag}_mpileup",
          minbasequal=int(config["min_bsq_for_cov_median_calculation"])
  message: "Samtools mpileup {params.input} file"
  shell: """
          samtools mpileup -d 1000000 -Q {params.minbasequal} -a {params.input} > {params.out}
         """

rule selection:
  input: expand("PREFILT/{dataset}/03_MPILEUP/params_mpq_{mapqual}_bq_{bq}_fr_{fr}/{prefix_mag}/{sample}_in_{prefix_mag}_mpileup", dataset = dataset, prefix_mag = prefix_MAGs, mapqual = mapqual, sample = samples, bq = bq, fr = fraction)
  output: all = expand("PREFILT/{{dataset}}/params_cov_{{mincov}}_mpq_{{mapqual}}_bq_{{bq}}_fr_{{fr}}/Estimated_median_cov_per_sample.tsv", dataset = dataset, mapqual = mapqual, bq = bq, fr = fraction, mincov = min_coverage),
          sel = expand("PREFILT/{{dataset}}/params_cov_{{mincov}}_mpq_{{mapqual}}_bq_{{bq}}_fr_{{fr}}/Selected_samples_Genomes.txt", dataset = dataset, mapqual = mapqual, bq = bq, fr = fraction, mincov = min_coverage)
  params:  mincov = int(config["min_coverage"]),
           fraction = float(config["fraction"]),
           dir = os.path.join("PREFILT", config["dataset"], "03_MPILEUP", mpileup_dir),
           out = os.path.join("PREFILT", config["dataset"], params_dir)
  message: "Selecting Samples with higher median coverage then {params.mincov} per Genome"
  shell: "python src/parse_subsample_median_cov.py -i {params.dir} -o {params.out} -f {params.fraction} -t {params.mincov}"
