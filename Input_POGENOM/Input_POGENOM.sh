#!/bin/bash -l

wd=$(pwd)
err_report() {
    echo "Error on line $1 - script Input_POGENOM.sh"
    cd $wd
    if test -f "temporal"; then rm temporal; fi
    exit 1
}

trap 'err_report $LINENO' ERR

#Default options
configFile="here"

#----Argument parse----------------------

for a in "$@"
do
case $a in
  -d=*|--path_to_config_file=*)
  if [ -z "${a#*=}" ];  then
  echo "value to argument -d No supplied"
  exit 0
  else configFile="${a#*=}"
  fi
  shift # past argument
  ;;

  *)
  echo -e '\nUsage: bash Input_POGENOM.sh [options]\n -d=<absolute path to configFile. Default=/<current>/<directory>/<to>/config_files/Input_POGENOM_config.json>\n'
  echo -e 'Description:\nThis program executes a pipeline that generates the required input files for POGENOM.\nThe aim of this pipeline is to increase the reproducibility of the data analysis, and to simplify the use of POGENOM.\nPOGENOM is a computer program that calculates several population genetic parameters for a genome in relation to a set of samples (https://github.com/EnvGen/POGENOM).\nPOGENOM takes as input a file of the variant call format.\nThis input file is generated by mapping one or several metagenomic samples against a reference genome with a read-aligner and calling variants using a variant caller.'
  exit 0
  ;;

esac
done

if [[ "$configFile" == here ]]; then configFile=$wd/config_files/Input_POGENOM_config.json; fi


if [[ "$configFile" != /* ]] || [ -z "$configFile" ]; then
    echo "Please provide an absoltute path to configfile e.g., bash run_input_pogenome.sh '/absolute/path/to/configfile' "
    exit 0
fi

cat $configFile | sed s/"[{|}]"//g | sed s/":"/"="/g | sed s/",$"//g | sed s/" ="/"="/g | sed s/"= "/"="/g | sed s/'"'//g | sed s/" "//g > temporal
. temporal

if [[ "$workdir" != /* ]] || [ -z "$workdir" ]; then
    echo "Please provide an absoltute path to the working directory in configfile e.g., 'workdir': '/absolute/path/to/working_directory/' "
    rm temporal
    exit 0
fi

#----Using prefilt option - full workflow
mkdir -p $workdir/log_files
if  [[ "$dataset" == prefilt ]]; then
           cd $workdir
           echo "INFO: Generating Reads subsets - Fraction used $fraction"
           bash src/create_prefilt_Reads_MAGs_subdir.sh $fraction $mags_ext $reads_ext $temp_sub_Reads_dir
           echo "INFO: Calculating Median coverage per MAG per sub-sample - Median coverage thresold $min_coverage"
           snakemake -s snakefiles/step_filter -j $threads --quiet 2> log_files/samples_filter.log
           echo "INFO: Calculating coverage and breadth in selected MAGs"
           bash src/create_prefilt_Reads_MAGs.sh $reads_ext
           cat PREFILT/Selected_samples_MAGs.tmp | grep -v "#" | while read line
           do
               mag=$(echo $line | cut -d " " -f1)
               samples=$(echo $line | cut -d " " -f2)
               snakemake -s snakefiles/step_pogenom_input step1_all --config my_mag="$mag" my_samples="$samples" -j $threads --quiet 2> log_files/coverage_breadth_$mag.log
               echo "INFO: Generating VCF files for MAG $mag"
               snakemake -s snakefiles/step_pogenom_input vcf --config my_mag="$mag" my_samples="$samples" -j $threads --quiet 2> log_files/vcf_$mag.log
           done
           echo "INFO: Input files for POGENOM are ready !!!"
             if [[ ! -z "$(grep "#" PREFILT/Selected_samples_MAGs.tmp)" ]]; then
                 echo "**********************************************"
                 echo "The following MAG(s) has(have) not been analysed"
                 cat PREFILT/Selected_samples_MAGs.tmp | grep "#" | while read line; do echo $line; done
                 echo "**********************************************"
             fi
rm temporal
exit 0
fi
#---End of prefilt option

#---Option when analysing a dataset (different to prefilt) 

cd $workdir
echo "INFO: Calculating coverage and breadth in $dataset MAGs"
snakemake -s snakefiles/step1_pogenom_input step1_all -j $threads --quiet 2> log_files/$dataset"_MAGs_coverage_breadth.log"

echo "INFO: Generating VCF files"
snakemake -s snakefiles/step1_pogenom_input vcf -j $threads --quiet 2> log_files/$dataset"_MAGs_vcf_files.log"
rm temporal

echo 'INFO: Input files for POGENOM are ready !!!'
